#import(lampetia.metamodel.Module)
#import(lampetia.metamodel._)
#import(lampetia.extensions.Strings)
#import(lampetia.cg.extensions.Models)
#import(lampetia.cg.extensions.Scalate)
#import(com.typesafe.config.Config)
#import(Strings._)
#import(Models._)
<%@ val metamodels: Seq[Model] %>
<%@ val module: Module%>
<%@ val config: Config%>
<%@ val model: Enum %>
#{
  val pname = model.discriminator.propertyName
  val ptpe = model.discriminator.tpe.literalTypeName
}#

// Enum ${model.modelName} Reads
implicit lazy val ${model.modelName.camelCase}Reads: Reads[${model.modelName}] =
reads[${model.modelName}](${pname} => ${model.modelName}.from${ptpe}(${pname}))

// Enum ${model.modelName} Writes
implicit lazy val ${model.modelName.camelCase}Writes: Writes[${model.modelName}] =
writes[${model.modelName}](v => v.${pname})