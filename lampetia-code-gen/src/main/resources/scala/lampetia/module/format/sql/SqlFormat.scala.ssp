#import(lampetia.metamodel.Module)
#import(lampetia.metamodel._)
#import(lampetia.cg.extensions.Models)
#import(lampetia.cg.extensions.Scalate)
#import(com.typesafe.config.Config)
#import(Models._)
<%@ val metamodels: Seq[Model] %>
<%@ val module: Module%>
<%@ val config: Config%>
package ${module.basePackage}.format

import lampetia.model._
import ${module.basePackage}.model._
import org.joda.time.DateTime
import play.api.libs.json.Json
#if (module.secure)
import lampetia.security.format.SecuritySqlFormat
import lampetia.security.model._
#end
<%@val imports: Seq[String] %>
#for (i <- imports)
  import ${i}
#end

trait ${module.modelName}SqlFormat #if (module.secure)  extends SecuritySqlFormat  #end{

  import ${module.basePackage}.module.${module.modelName}Module.dialect._
  import nxt.event.module.EventModule.json._

#for (model <- metamodels.seqProperties)
  implicit lazy val consume${model.modelName}Seq: Consume[Seq[${model.modelName}]] = consume[String].fmap(Json.parse).fmap(Json.fromJson[Seq[${model.modelName}]](_)).fmap(_.get)
  implicit lazy val produce${model.modelName}Seq: Produce[Seq[${model.modelName}]] = a => produce(Json.stringify(Json.toJson(a)))

#end

#for (model <- metamodels.optionalProperties)
  #match (model)
  #case (v: Value)
  implicit lazy val consume${model.modelName}Option: Consume[Option[${model.modelName}]] = consume[Option[String]].fmap(_.map(${model.modelName}))  
  implicit lazy val produce${model.modelName}Option: Produce[Option[${model.modelName}]] = a => produce(a.map(_.value))

  #otherwise
  implicit lazy val consume${model.modelName}Option: Consume[Option[${model.modelName}]] = consume[Option[String]].fmap(_.map(Json.parse).map(Json.fromJson[${model.modelName}](_)).map(_.get))
  implicit lazy val produce${model.modelName}Option: Produce[Option[${model.modelName}]] = a => produce(a.map(Json.toJson(_)).map(Json.stringify(_)))

  #end
#end

#for (model <- metamodels.valueModels)
  <%val name = model.modelName%>
  <%val pType = model.valueProperty.tpe.modelName %>
  implicit lazy val consume${name}: Consume[${name}] = consume[${pType}].fmap(${name})
  implicit lazy val produce${name}: Produce[${name}] = a => produce(a.value)
#end

#for (model <- metamodels.idModels)
  <%val name = model.modelName%>
  implicit lazy val consume${name}: Consume[${name}] = consume[String].fmap(${name})
  implicit lazy val produce${name}: Produce[${name}] = a => produce(a.value)

#end

#for (model <- metamodels.enumModels)
  <%val name = model.modelName%>
  implicit lazy val consume${name}: Consume[${name}] = consume[String].fmap(${name}.apply)
  implicit lazy val produce${name}: Produce[${name}] = a => produce(a.value)

#end

#for (model <- metamodels.entityModels)
  <%
    val name = model.modelName
    val hasId = metamodels.idEntity.contains(model)

    // consume
    val cprefix = "consume["
    val cpostfix = "]"
    val cid = if(hasId) cprefix + model.idModelName + cpostfix else ""
    val cref = if(model.hasReferenceModel) cprefix + model.refModelName + cpostfix else ""
    val cdata = if(model.hasData) cprefix  + model.dataModelName + cpostfix else ""
    val consume = List(cid, cref,cdata).filter(_ != "") match {
        case h :: Nil =>  h + ".fmap"
        case l => "(" + l.mkString(" and ") + ")"
    }

    // produce
    val pprefix = "produce(a."
    val ppostfix = ")"
    val pid = if(hasId) pprefix + model.id.propertyName + ppostfix else ""
    val pref = if(model.hasReferenceModel) pprefix + "ref" + ppostfix else ""
    val pdata = if(model.hasData) pprefix  + "data" + ppostfix else ""
    val produce = List(pid, pref, pdata).filter(_ != "").mkString(" andThen ")
  %>
  implicit lazy val consume${name}: Consume[${name}] = ${consume}(${name})
  implicit lazy val produce${name}: Produce[${name}] = a => ${produce}

  <%
    def producer(f:Property => String )(props: Seq[Property], pp: List[String]): List[String] = props match {
      case Nil  => pp
      case hp :: t =>
        val np: String =  f(hp)
        producer(f)(t, pp :+ np)
    }

    def consumeProperty(p:Property, prefix: String, postfix: String) = p.tpe match {
      case jp: JsonType => prefix + "String" + postfix + ".fmap(Json.parse)"
      case _ => prefix + p.typeName + postfix
    }

    def produceProperty(p:Property, prefix: String, postfix: String) = p.tpe match {
      case jp: JsonType => "produce(Json.stringify(a.json))"
      case _ => prefix + p.propertyName + postfix
    }
  %>

  #if (model.hasData)
  <%
  val consumeData =
    producer(p => consumeProperty(p, cprefix, cpostfix))(model.dataModel.properties.toList, Nil) match {
    case h :: Nil =>  h + ".fmap"
      case l => "(" + l.mkString(" and ") + ")"
  }

  val produceData =
    producer(p => produceProperty(p, pprefix, ppostfix))(model.dataModel.properties.toList, Nil).mkString(" andThen ")
  %>

    implicit lazy val consume${model.dataModelName}: Consume[${model.dataModelName}] = ${consumeData}(${model.dataModelName})
    implicit lazy val produce${model.dataModelName}: Produce[${model.dataModelName}] = a => ${produceData}

  #end

  #if (model.hasReferenceModel)
    <%
    val consumeRef =
      producer(p => consumeProperty(p, cprefix, cpostfix))(model.entityRefProperties.toList, Nil) match {
        case h :: Nil =>  h + ".fmap"
        case l => "(" + l.mkString(" and ") + ")"
      }

    val produceRef =
      producer(p => produceProperty(p, pprefix, ppostfix))(model.entityRefProperties.toList, Nil).mkString(" andThen ")

    %>

    implicit lazy val consume${model.refModelName}: Consume[${model.refModelName}] = ${consumeRef}(${model.refModelName})
    implicit lazy val produce${model.refModelName}: Produce[${model.refModelName}] = a => ${produceRef}

  #end
#end
}