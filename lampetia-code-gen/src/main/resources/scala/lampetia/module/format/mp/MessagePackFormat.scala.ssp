#import(lampetia.metamodel.Module)
#import(lampetia.metamodel._)
#import(lampetia.extensions.Strings)
#import(lampetia.cg.extensions.Models)
#import(lampetia.cg.extensions.Scalate)
#import(com.typesafe.config.Config)
#import(Strings._)
#import(Models._)
<%@ val metamodels: Seq[Model] %>
<%@ val module: Module%>
<%@ val config: Config%>
package ${module.basePackage}.format.mp

import ${module.basePackage}.model._
import lampetia.format.mp._
import lampetia.model._
import lampetia.format.binary.BinaryFormat

import org.joda.time.DateTime
<%@val imports: Seq[String] %>
#for (i <- imports)
  import ${i}
#end

trait ${module.name}MessagePackFormat extends MessagePackFormat {
#for (model <- metamodels.messagePackModels)
  #match (model)
  #case (m: Id)
    ${render("IdModelMessagePackFormat.ssp", Map("model" -> m))}
  #otherwise
  #end
#end
#for (model <- metamodels.messagePackModels)
  #match (model)
  #case (m: Enum)
    ${render("EnumModelMessagePackFormat.ssp", Map("model" -> m))}
  #case (m: Value)
    ${render("ValueModelMessagePackFormat.ssp", Map("model" -> m))}
  #case (m: Composite)
    ${render("CompositeModelMessagePackFormat.ssp", Map("model" -> m))}
  #case (m: Entity)
    ${render("EntityModelMessagePackFormat.ssp", Map("model" -> m))}
  #otherwise
  #end
#end
}

object ${module.name}MessagePackFormat extends ${module.name}MessagePackFormat