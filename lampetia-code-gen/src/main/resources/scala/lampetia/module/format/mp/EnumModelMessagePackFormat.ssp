#import(lampetia.metamodel.Module)
#import(lampetia.metamodel._)
#import(lampetia.extensions.Strings)
#import(lampetia.cg.extensions.Models)
#import(lampetia.cg.extensions.Scalate)
#import(com.typesafe.config.Config)
#import(Strings._)
#import(Models._)
<%@ val metamodels: Seq[Model] %>
<%@ val module: Module%>
<%@ val config: Config%>
<%@ val model: Enum %>
#{
  val pname = model.discriminator.propertyName
  val ptpe = model.discriminator.tpe.literalTypeName
}#

// Enum ${model.modelName} Consume
implicit lazy val consume${model.modelName}: Consume[${model.modelName}] = consume[String] andThen ${model.modelName}.fromString

// Enum ${model.modelName} Produce
implicit lazy val produce${model.modelName}: Produce[${model.modelName}] = a => produce(a.${pname})