#import(lampetia.metamodel.Module)
#import(lampetia.metamodel._)
#import(lampetia.extensions.Strings)
#import(lampetia.cg.extensions.Models)
#import(lampetia.cg.extensions.Scalate)
#import(com.typesafe.config.Config)
#import(Strings._)
#import(Models._)
<%@ val metamodels: Seq[Model] %>
<%@ val module: Module%>
<%@ val config: Config%>
<%@ val model: Composite %>
// Composite ${model.modelName} Reads
#match (model.properties.length)
#case (1)
  #{val p = model.properties(0)}#
  implicit lazy val ${model.modelName.camelCase}Reads: Reads[${model.modelName}] =
  ${p.jsonReader(model)}.map(${model.modelName})
#otherwise
  implicit lazy val ${model.modelName.camelCase}Reads: Reads[${model.modelName}] = (
  <%=model.properties.jsonReaderProperties.map(_.jsonReader(model)).mkString(" and\n")%>
  )(${model.modelName}.apply _)
#end

// Composite ${model.modelName} Writes
implicit lazy val ${model.modelName.camelCase}Writes: Writes[${model.modelName}] =
new Writes[${model.modelName}] {
def writes(instance: ${model.modelName}): JsValue =
Json.obj(<%=
  model.properties.jsonWriterProperties
  .map(_.jsonWriter("instance", model))
  .mkString(",\n")%>)
}