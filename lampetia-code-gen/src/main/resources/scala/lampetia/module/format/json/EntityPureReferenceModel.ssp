#import(lampetia.metamodel.Module)
#import(lampetia.metamodel._)
#import(lampetia.extensions.Strings)
#import(lampetia.cg.extensions.Models)
#import(lampetia.cg.extensions.Scalate)
#import(com.typesafe.config.Config)
#import(Strings._)
#import(Models._)
<%@ val metamodels: Seq[Model] %>
<%@ val module: Module%>
<%@ val config: Config%>
<%@ val model: Entity %>
#{
  val refVar = model.refModelName.camelCase
}#
// Entity Reference ${model.refModelName} Reads
${render("ReferenceModelReads.ssp",
Map("model" -> model,
"properties" -> model.entityRefProperties,
"refVar" -> refVar,
"refModelName" -> model.refModelName))}

// Entity Reference ${model.refModelName} Writes
implicit lazy val ${refVar}Writes: TopLevelWrites[${model.refModelName}] =
new TopLevelWrites[${model.refModelName}] {
def obj(instance: ${model.refModelName}): JsObject =
Json.obj("owner" ->
Json.obj(<%=
  model.entityRefProperties.jsonWriterProperties
  .map(_.jsonWriter("instance", model))
  .mkString(",\n")%>))
}