#import(lampetia.metamodel.Module)
#import(lampetia.metamodel._)
#import(lampetia.extensions.Strings)
#import(lampetia.cg.extensions.Models)
#import(com.typesafe.config.Config)
#import(Strings._)
#import(Models._)
<%@ val metamodels: Seq[Model] %>
<%@ val module: Module%>
<%@ val config: Config%>

package ${module.basePackage}.model

import lampetia.meta.feature.sql
import lampetia.meta._
import lampetia.model._
import nxt.security.model._
import org.joda.time.DateTime
import scala.util.{Success, Try}
<%@val imports: Seq[String] %>
#for (i <- imports)
  import ${i}
#end

#for (model <- metamodels)

#match (model)
#case (m: Enum)
<%-- Enum Start --%>
    #{
        val pname = m.discriminator.propertyName
        val ptpe = m.discriminator.tpe.literalTypeName
    }#

sealed trait ${model.modelName} extends Any {
    def ${pname}: ${ptpe}
}

#for (cs <- m.cases )
case object ${cs.name} extends ${model.modelName} {
    val ${pname} = "${cs.value}"
}
#end

#for (gc <- m.generalCase)
case class ${gc}(${pname}: ${ptpe}) extends ${model.modelName}
#end

object ${m.modelName}{
    def apply(value: ${ptpe}): ${m.modelName}  = value match {
#for (cs <- m.cases)
        case s if s == ${cs.name}.${pname} => ${cs.name}
#end
    }
}
<%-- Enum End --%>

#case (id: Id)
<%-- skipping id models, included within entity generation --%>

#case (m: Value)
<%-- Value Start --%>
case class ${m.modelName}(${m.valueProperty.propertyName}: ${m.valueProperty.typeName}) extends AnyVal
<%-- Value End --%>

#case (m: Composite)
<%-- Composite Start --%>
case class ${m.modelName}(${m.properties.map(_.nameColonTypeInEntity).mkString(",")})
<%-- Composite End --%>

#case (m: Entity)
case class ${m.idModelName}(value: String) extends AnyVal

#if (m.hasReferenceModel)
case class ${m.modelName}Ref(${m.entityRefProperties.map(_.nameColonTypeInEntity).mkString(",")})
#end

#if (m.hasData)
case class ${m.dataModelName}(${m.entityDataProperties.map(_.nameColonTypeInEntity).mkString(", \n\t\t")})
#end

<%
    val id = "id: "+ m.idModelName
    val ref = if(m.hasReferenceModel) "ref: " + m.refModelName else ""
    val data = if(m.hasData) "data: " + m.dataModelName else ""
    val prop = List(id, ref,data).filter(_ != "").mkString(", ")
%>
case class ${model.modelName}(${prop})

#otherwise
    // WARNING: Model ${model.modelName} was not generated
#end
#end

trait ${module.modelName}Model #if (module.secure) extends SecurityModel #end {

    def schema: String

#for (model <- metamodels.entityModels)

    <% val hasId = metamodels.idEntity.contains(model)%>
    implicit object ${model.modelName}Model
    extends Model[${model.modelName}]
    with HasId[${model.modelName}, ${model.modelName}Id]
    #if (model.hasReferenceModel)
    with HasRef[${model.modelName}, ${model.modelName}Ref]
    #end
    #if (model.hasData)
    with HasData[${model.modelName}, ${model.modelName}Data]
    #end
    #if (hasId)
    with CanGenerate[${model.modelName}Id]
    with CanParse[${model.modelName}Id]
    with UUIDGenerator #end {
        val modelName: String = "${model.modelName}"
    #if (hasId)
        val id = property[${model.modelName}Id]("id")
        def generate: ${model.modelName}Id = ${model.modelName}Id(generateStringId)
        def parse(stringId: String): Try[${model.modelName}Id] = Success(${model.modelName}Id(stringId))
    #end
    #if (model.hasReferenceModel)
        object ref extends RefModel[${model.modelName}Ref] {
        #for (refProps <- model.entityRefProperties)
            ${refProps.sqlColumnProperty(model)}

        #end

        val properties = Seq(${model.entityRefProperties.map(_.propertyName).mkString(", ")})

        }
    #end
    #if (model.hasData)
        object data extends DataModel[${model.modelName}Data] {
        #for (dataProp <- model.entityDataProperties)
        ${dataProp.sqlColumnProperty(model)}

        #end

        val properties = Seq(${model.entityDataProperties.map(_.propertyName).mkString(", ")})
        }
    #end

    override lazy val features: Seq[Feature] = Seq(
    ${model.sqlFeatures}
    )
    }
#end
}