#import(lampetia.metamodel.Module)
#import(lampetia.metamodel._)
#import(lampetia.extensions.Strings)
#import(lampetia.cg.extensions.Models)
#import(com.typesafe.config.Config)
#import(Strings._)
#import(Models._)
<%@ val metamodels: Seq[Model] %>
<%@ val module: Module%>
<%@ val config: Config%>

package ${module.basePackage}.model

import lampetia.meta._
import lampetia.meta.feature._
import lampetia.model._
import org.joda.time.DateTime
import play.api.libs.json.JsValue
import play.libs.Json
import scala.util.{Success, Try}
<%@val imports: Seq[String] %>
#for (i <- imports)
  import ${i}
#end

#for (model <- metamodels.enumModels)
  #{
    val pname = model.discriminator.propertyName
    val ptpe = model.discriminator.tpe.literalTypeName
  }#

  sealed trait ${model.modelName} extends Any {
    def ${pname}: ${ptpe}
  }

  #for (cs <- model.cases )
  case object ${cs.name} extends ${model.modelName} {
    val ${pname} = "${cs.value}"
  }
  #end

  #for (gc <- model.generalCase)
  case class ${gc}(${pname}: ${ptpe}) extends ${model.modelName}
  #end

  object ${model.modelName}{
    def apply(value: ${ptpe}): ${model.modelName}  = value match {
    #for (cs <- model.cases)
      case s if s == ${cs.name}.${pname} => ${cs.name}
    #end
    }
  }

#end

#for (model <- metamodels.valueModels)

  case class ${model.modelName}(${model.valueProperty.propertyName}: ${model.valueProperty.typeName}) extends AnyVal

#end

#for (model <- metamodels.compositeModels)

  case class ${model.modelName}(${model.properties.map(_.nameColonTypeInEntity).mkString(",")})


#end

#for (model <- metamodels.entityModels)

    <% val hasId = metamodels.idEntity.contains(model)%>
    #if ( hasId )
    case class ${model.idModelName}(value: String) extends AnyVal
    #end

    #if (model.hasData)
    case class ${model.dataModelName}(${model.entityDataProperties.map(_.nameColonTypeInEntity).mkString(",\n\t\t")})
    #end

    #if (model.hasReferenceModel)
    case class ${model.modelName}Ref(${model.entityRefProperties.map(_.nameColonTypeInEntity).mkString(",")})
    #end

    <%
    val id = if(hasId) "id: "+ model.idModelName else ""
    val ref = if(model.hasReferenceModel) "ref: " + model.modelName + "Ref" else ""
    val data = if(model.hasData) "data: " + model.dataModelName else ""
    val prop = List(id, ref,data).filter(_ != "").mkString(", ")
    %>
    case class ${model.modelName}(${prop})

#end

  trait ${module.modelName}Model {

    def schema: String

#for (model <- metamodels.entityModels)

   <% val hasId = metamodels.idEntity.contains(model)%>
  implicit object ${model.modelName}Model
      extends Model[${model.modelName}]
      #if (hasId)
      with HasId[${model.modelName}, ${model.modelName}Id]
      #end
      #if (model.hasReferenceModel)
      with HasRef[${model.modelName}, ${model.modelName}Ref]
      #end
      #if (model.hasData)
      with HasData[${model.modelName}, ${model.modelName}Data]
      #end
      #if (hasId)
      with CanGenerate[${model.modelName}Id]
      with CanParse[${model.modelName}Id]
      with UUIDGenerator #end {
          val modelName: String = "${model.modelName}"
          #if (hasId)
          val id = property[${model.modelName}Id]("id")
          def generate: ${model.modelName}Id = ${model.modelName}Id(generateStringId)
          def parse(stringId: String): Try[${model.modelName}Id] = Success(${model.modelName}Id(stringId))
          #end
          #if (model.hasReferenceModel)
          object ref extends RefModel[${model.modelName}Ref] {
           #for (refProps <- model.entityRefProperties)
          val ${refProps.propertyName} = property[${refProps.propertyTypeInEntity}]("${refProps.propertyName.snakeCase}")
            #end
          val properties = Seq(${model.entityRefProperties.map(_.propertyName).mkString(", ")})
          }
          #end
          #if (model.hasData)
          object data extends DataModel[${model.modelName}Data] {
          #for (dataProp <- model.entityDataProperties)
          val ${dataProp.propertyName} = property[${dataProp.propertyTypeInEntity}]("${dataProp.propertyName.snakeCase}")
          #end
          val properties = Seq(${model.entityDataProperties.map(_.propertyName).mkString(", ")})
          }
          #end

          override lazy val features: Seq[Feature] = Seq(
          sql.schema(schema),
          sql.name("${model.modelName.snakeCase}")#if (hasId),
          sql.primaryKey("${model.modelName.snakeCase}_pk")(${model.modelName}Model.id)#end #if (model.hasReferenceModel),
          #for (refProps <- model.entityRefProperties)
          sql.foreignKey("${model.modelName.snakeCase}_ref_${refProps.propertyName.snakeCase}")(ref.${refProps.propertyName})(${refProps.tpe.entity.modelName}Model, ${refProps.tpe.entity.modelName}Model.id)
          #end
          #end
  )
      }

#end
  }
