#import(lampetia.metamodel.Module)
#import(lampetia.metamodel._)
#import(lampetia.extensions.Strings)
#import(lampetia.cg.extensions.Models)
#import(lampetia.cg.extensions.Scalate)
#import(com.typesafe.config.Config)
#import(Strings._)
#import(Models._)
<%@ val metamodels: Seq[Model] %>
<%@ val module: Module%>
<%@ val config: Config%>
<%@ val model: Entity %>
package ${module.basePackage}.service

import ${module.basePackage}.model._
import ${module.basePackage}.module.${module.modelName}TestModule
import org.scalatest.concurrent.ScalaFutures
import nxt.event.module.EventTestModule.configuration
import org.scalatest._
import ${module.basePackage}.spec.${module.modelName}InstanceFactory
import org.scalatest.time.{Minutes, Span}
import org.scalatest.concurrent.PatienceConfiguration.Timeout

class  ${model.modelName}ServiceSpec extends FlatSpec with Matchers with ScalaFutures {

  implicit val ec = configuration.concurrent.executionContext
  implicit val connectionSource = ${module.modelName}TestModule.connectionSource

  def oneMinute: Timeout = Timeout(Span(1, Minutes))

  val service = new ${model.modelName}Service {}
  val factory = ${module.modelName}InstanceFactory

  #match (model)
  #case (m:Composite)
  // TODO
  #case (m: Entity)
  ${render("EntityServiceSpec.scala.ssp", Map("model" -> m))}

  #otherwise
  #end

}