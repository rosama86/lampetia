#import(lampetia.metamodel.Module)
#import(lampetia.metamodel._)
#import(lampetia.extensions.Strings)
#import(lampetia.cg.extensions.Models)
#import(lampetia.cg.extensions.Scalate)
#import(com.typesafe.config.Config)
#import(Strings._)
#import(Models._)
<%@ val model: Entity %>
<%@ val module: Module %>
<%@ val metamodels: Seq[Model] %>
<%@ val config: Config%>
package ${module.basePackage}.dao

import ${module.basePackage}.di._
import ${module.basePackage}.model._
import org.joda.time.DateTime
import ${module.basePackage}.spec.${module.name}InstanceFactory._
import lampetia.dao.DaoSpec
import org.specs2.mutable.Specification
import lampetia.specs2.Specs2Spec
<%@val imports: Seq[String] %>
#for (i <- imports)
  import ${i}
#end

class ${model.modelName}DaoSpec extends Specification with DaoSpec with Specs2Spec {

  def specName = "${model.modelName}Dao"

  val module = ${module.name}TestModule
  import module._
  import ${module.name}Syntax._
  object ${model.modelName}NonSecureOps extends EntityOps[${model.modelName}, ${model.modelName.camelCase}SlickEntity.type](${model.modelName.camelCase}SlickEntity)
  import ${model.modelName}NonSecureOps._

  type E = ${model.modelName}
  type Id = ${model.idModelName}
  type Data = ${model.modelName}Data

  def createInstance: Data = create${model.modelName}Data

  override def beforeDelete(id: ${model.idModelName}): Unit =
    store.run(beforeDelete${model.modelName}(id))

  specName should {

    findInstanceById.apply { r =>
      val (out, instance) = r
      (out must beSome[E]) and (out.get.id must_== instance.id)
    }

    insertInstanceWithValidId.apply { r =>
      r.id.resource must_== r.resource
    }

    deleteInstanceById.apply { r =>
      val (deleted, found) = r
      (deleted must be > 0) and (found must beEmpty)
    }

  }

}