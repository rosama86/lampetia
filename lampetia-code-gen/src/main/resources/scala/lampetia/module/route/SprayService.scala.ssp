#import(lampetia.metamodel.Module)
#import(lampetia.metamodel._)
#import(lampetia.extensions.Strings)
#import(lampetia.cg.extensions.Models)
#import(lampetia.cg.extensions.Scalate)
#import(com.typesafe.config.Config)
#import(Strings._)
#import(Models._)
<%@ val metamodels: Seq[Model] %>
<%@ val module: Module%>
<%@ val config: Config%>
package ${module.basePackage}.route

import akka.actor.{Props, ActorRef}
import lampetia.config.Configuration
import lampetia.route.{SprayConfiguration, SprayService}
import ${module.basePackage}.conf.${module.name}Configuration
<%@val imports: Seq[String] %>
#for (i <- imports)
  import ${i}
#end

class ${module.name}SprayService extends SprayService with akka.kernel.Bootable {

  def configuration: Configuration = ${module.name}Configuration
  def sprayConfiguration: SprayConfiguration = ${module.name}Configuration

  def serviceActor: ActorRef = system.actorOf(Props[${module.name}HttpServiceActor], "${module.name.lispCase}-spray-service-actor")


  def startup(): Unit = serviceStartup()

  def shutdown(): Unit = configuration.shutdown()

}