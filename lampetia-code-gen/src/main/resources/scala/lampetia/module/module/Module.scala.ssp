#import(lampetia.metamodel.Module)
#import(lampetia.metamodel._)
#import(lampetia.extensions.Strings)
#import(lampetia.cg.extensions.Models)
#import(lampetia.cg.extensions.Scalate)
#import(com.typesafe.config.Config)
#import(Strings._)
#import(Models._)
<%@ val metamodels: Seq[Model] %>
<%@ val module: Module%>
<%@ val config: Config%>

package ${module.basePackage}.module

import lampetia.conf.{Configuration => LampetiaConfiguration}
import lampetia.sql.{ConnectionSourceFactories, JdbcConnectionSource}
import lampetia.sql.dialect.postgresql.{PostgresqlConfiguration, Postgresql}
import ${module.basePackage}.conf.${module.modelName}Configuration
import ${module.basePackage}.format.{${module.modelName}SqlFormat, ${module.modelName}JsonFormat}
import ${module.basePackage}.model.${module.modelName}Model
<%@val imports: Seq[String] %>
#for (i <- imports)
  import ${i}
#end

trait ${module.modelName}Module {

  val dialect: Postgresql

  trait Configuration extends LampetiaConfiguration with ${module.modelName}Configuration with PostgresqlConfiguration {
    def close(): Unit = connectionSource.shutdown()
  }
  def configuration: Configuration

  trait Json extends ${module.modelName}JsonFormat
  def json: Json

  trait Sql extends ${module.modelName}Model with ${module.modelName}SqlFormat {
    def schema = configuration.schema
  }
  def sql: Sql

  def connectionSource: JdbcConnectionSource
}

object ${module.modelName}Module extends ${module.modelName}Module {  self =>

  val dialect = Postgresql

  object configuration extends super.Configuration

  object json extends super.Json

  object sql extends super.Sql  {
   val dialect = self.dialect
  }

  def connectionSourceFactories = new ConnectionSourceFactories {}

  lazy val connectionSource = connectionSourceFactories.hikari(
    configuration.pgJdbcDataSourceClassName,
    configuration.pgHost,
    configuration.pgPort,
    configuration.pgDatabase,
    configuration.pgUser,
    configuration.pgPassword,
    configuration.pgMaximumPoolSize,
    configuration.pgLeakDetectionThreshold)

}