#import(lampetia.metamodel.Module)
#import(lampetia.metamodel._)
#import(lampetia.extensions.Strings)
#import(lampetia.cg.extensions.Models)
#import(lampetia.cg.extensions.Scalate)
#import(com.typesafe.config.Config)
#import(Strings._)
#import(Models._)
<%@ val metamodels: Seq[Model] %>
<%@ val module: Module%>
<%@ val config: Config%>

package ${module.basePackage}.module

#if(module.secure)
import lampetia.security.module.SecurityModule
#else
import lampetia.module.{ ModuleRoutes, ModuleServices, ModuleDaos, Module }
#end
import ${module.basePackage}.model._
<%@val imports: Seq[String] %>
#for (i <- imports)
  import ${i}
#end

#if(module.secure)
trait ${module.name}Module extends SecurityModule {
#else
trait ${module.name}Module extends Module with ModuleDaos with ModuleServices with ModuleRoutes {
#end

  // Module Daos
#for(model <- metamodels.entityModels)

  trait ${model.modelName}Dao extends StatefulDao[${model.modelName}]
  def ${model.modelName.camelCase}Dao: ${model.modelName}Dao

#end

  // Module Services
#for(model <- metamodels.entityModels)

  trait ${model.modelName}Service extends StatefulEntityService[${model.modelName}]
  def ${model.modelName.camelCase}Service: ${model.modelName}Service

#end
}