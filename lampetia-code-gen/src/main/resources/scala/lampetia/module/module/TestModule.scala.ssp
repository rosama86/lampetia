#import(lampetia.metamodel.Module)
#import(lampetia.metamodel._)
#import(lampetia.extensions.Strings)
#import(lampetia.cg.extensions.Models)
#import(lampetia.cg.extensions.Scalate)
#import(com.typesafe.config.Config)
#import(Strings._)
#import(Models._)
<%@ val metamodels: Seq[Model] %>
<%@ val module: Module%>
<%@ val config: Config%>

package ${module.basePackage}.module

import lampetia.sql.ConnectionSourceFactories
import lampetia.sql.dialect.postgresql.Postgresql
<%@val imports: Seq[String] %>
#for (i <- imports)
  import ${i}
#end

object  ${module.modelName}TestModule extends ${module.modelName}Module { self =>

  val dialect = Postgresql

  object configuration extends super.Configuration

  object json extends super.Json

  object sql extends super.Sql {
    val dialect = self.dialect
  }

  def connectionSourceFactories = new ConnectionSourceFactories {}

  lazy val connectionSource = connectionSourceFactories.hikari(
    configuration.pgJdbcDataSourceClassName,
    configuration.pgHost,
    configuration.pgPort,
    configuration.pgDatabase,
    configuration.pgUser,
    configuration.pgPassword,
    configuration.pgMaximumPoolSize,
    configuration.pgLeakDetectionThreshold)

  Runtime.getRuntime.addShutdownHook(new Thread() {
    override def run(): Unit = {
      configuration.logger.info("[${module.modelName.lispCase}-service] This test configuration should be shutting down now ...")
      configuration.shutdown()
    }
  })
}