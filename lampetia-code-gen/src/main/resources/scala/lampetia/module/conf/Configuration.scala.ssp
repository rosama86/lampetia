#import(lampetia.metamodel.Module)
#import(lampetia.metamodel._)
#import(lampetia.extensions.Strings)
#import(lampetia.cg.extensions.Models)
#import(Strings._)
#import(Models._)
<%@ val metamodels: Seq[Model] %>
<%@ val module: Module%>

package ${module.basePackage}.conf

import lampetia.conf.{Configuration, Lifecycle}
import scala.concurrent.ExecutionContext

trait ${module.modelName}Configuration extends Lifecycle { self: Configuration =>

  lazy val schema: String =
    config.getString("lampetia.module.${module.modelName.camelCase}.schema")

  lazy val jwtKey: String =
    config.getString("lampetia.module.${module.modelName.camelCase}.jwt.key")

  abstract override def shutdown(): Unit = {
    logger.info(s"[${module.modelName.camelCase}] shutdown sequence: begin")
    logger.info(s"[${module.modelName.camelCase}] shutdown sequence: done")
    super.shutdown()
  }

}

