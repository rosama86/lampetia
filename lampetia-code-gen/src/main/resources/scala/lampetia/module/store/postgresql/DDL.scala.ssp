#import(lampetia.metamodel.Module)
#import(lampetia.metamodel._)
#import(lampetia.extensions.Strings)
#import(lampetia.cg.extensions.Models)
#import(com.typesafe.config.Config)
#import(Strings._)
#import(Models._)
<%@ val metamodels: Seq[Model] %>
<%@ val module: Module%>
<%@ val config: Config%>
package ${module.basePackage}.store.postgresql

import lampetia.store.postgresql.DDL
import lampetia.format.sql.ExtendedPostgresDriver
import ExtendedPostgresDriver.api._
import scala.concurrent.Await
import scala.concurrent.duration.Duration
<%@val imports: Seq[String] %>
#for (i <- imports)
  import ${i}
#end

import ${module.basePackage}.conf.Default${module.name}Module._

trait ${module.name}DDL extends DDL {
  def ddl = <%=metamodels.entityModels.map(m => s"${m.modelName.camelCase}Table.schema").mkString(" ++\n ")%>
}

object ${module.name}DDLPrinter extends ${module.name}DDL {

  def main(args: Array[String]) {

    dropStatements.foreach(println)
    createStatements.foreach(println)

  }

}

object ${module.name}DDLCreate extends ${module.name}DDL {

  def main(args: Array[String]): Unit = {
    Await.result(store.run(ddl.create), Duration.Inf)
    configuration.shutdown()
  }
}

object ${module.name}DDLDrop extends ${module.name}DDL {

  def main(args: Array[String]): Unit = {
    Await.result(store.run(ddl.drop), Duration.Inf)
    configuration.shutdown()
  }
}
