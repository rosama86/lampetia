cg {

  engine {
    classpath = "target/scala-2.11/classes"
    working-dir = "target/gen/"
  }

  generator {
    base-directory = "./generated"
    scalariform-options = [
      "-preserveDanglingCloseParenthesis",
      "+alignSingleLineCaseStatements",
      "-spaceInsideBrackets",
      "-spaceInsideParentheses",
      "-indentSpaces=2"
    ]

    security-service {
      postgres {
        db-name = "lampetia"
        username = "admin"
        password = "admin"
        schema = "lampetia"
        security-schema = "lampetia"
      }
      spray {
        port = 3001
      }
    }

    service {
      postgres {
        db-name = "lampetia"
        username = "admin"
        password = "admin"
        schema = "music"
        security-schema = "lampetia"
      }
      spray {
        port = 4000
      }
    }

    node {
      facebook {
        client-id = "1388300834826511"
        client-secret = "a63106a1015f0d2c1ea4b42d8705f35"
      }
      service {
        port = 9090
      }
    }

    deploy {
      vagrant {
        box = "ubuntu/trusty64"
        ip = "192.168.50.51"
        ram = 2048
        cpus = 2
      }
      ansible {
        prod {
          ip = "95.85.21.232"
        }
      }
    }
  }

  # Cartridge Templates
  template {

    # SBT Cartridge
    sbt {
      #exclude = ["plugins"]
      build-properties = "sbt/build.properties.ssp"
      plugins = "sbt/plugins.sbt.ssp"
      common = "sbt/Common.scala.ssp"
      root-project-build = "sbt/Build.scala.ssp"
      sub-project-build = "sbt/build.sbt.ssp"
      model-build = "sbt/model-build.sbt.ssp"
      service-build = "sbt/service-build.sbt.ssp"
      default-organization = "nxt"
      default-version = "0.1-SNAPSHOT"
    }

    # Model Cartridge
    model {
      #exclude = ["json-format"]
      #model-package-object = "scala/lampetia/module/model/package.scala.ssp"
      models = "scala/lampetia/module/model/models.scala.ssp"
      json-format = "scala/lampetia/module/format/json/JsonFormat.scala.ssp"
      json-format-spec = "scala/lampetia/module/format/json/JsonFormatSpec.scala.ssp"
      messagepack-format = "scala/lampetia/module/format/mp/MessagePackFormat.scala.ssp"
      messagepack-format-spec = "scala/lampetia/module/format/mp/MessagePackFormatSpec.scala.ssp"
      sbt-libraries = [
        """ "lampetia" %% "lampetia-model" % "0.1-SNAPSHOT" """
      ]
    }

    # Service Cartridge
    service {
      #exclude = ["scala-format", "sql-format"]
      application-conf = "application.conf.ssp"
      logback-xml = "logback.xml.ssp"
      configuration = "scala/lampetia/module/conf/Configuration.scala.ssp"
      module = "scala/lampetia/module/module/Module.scala.ssp"
      test-configuration = "scala/lampetia/module/di/TestConfiguration.scala.ssp"
      sql-format = "scala/lampetia/module/format/sql/SqlFormat.scala.ssp"
      spec-instance-factory = "scala/lampetia/module/spec/InstanceFactory.scala.ssp"
      dao-spec = "scala/lampetia/module/dao/DaoSpec.scala.ssp"
      child-dao-spec = "scala/lampetia/module/dao/ChildDaoSpec.scala.ssp"
      postgresql-module = "scala/lampetia/module/store/postgresql/PostgresqlModule.scala.ssp"
      http-service-actor = "scala/lampetia/module/route/HttpServiceActor.scala.ssp"
      route = "scala/lampetia/module/route/Route.scala.ssp"
      child-route = "scala/lampetia/module/route/ChildRoute.scala.ssp"
      route-spec = "scala/lampetia/module/route/RouteSpec.scala.ssp"
      child-route-spec = "scala/lampetia/module/route/ChildRouteSpec.scala.ssp"
      spray-service = "scala/lampetia/module/route/SprayService.scala.ssp"
      ddl = "scala/lampetia/module/store/postgresql/DDL.scala.ssp"
      service-spec= "scala/lampetia/module/service/ServiceSpec.scala.ssp"
      sbt-libraries = [
          """ "lampetia" %% "lampetia-common" % "0.1-SNAPSHOT" """,
          """ "lampetia" %% "lampetia-security" % "0.1-SNAPSHOT" """,
          """ "lampetia" %% "lampetia-testkit" % "0.1-SNAPSHOT" % "test" """
      ]
    }

    # Node Cartridge
    node {
      package-json-secure = "node/package-secure.json.ssp"
      package-json = "node/package.json.ssp"
      server-secure = "node/server-secure.coffee.ssp"
      server = "node/server.coffee.ssp"
      index = "node/views/index.jade.ssp"
      login = "node/views/login.jade.ssp"
      angular-app = "node/public/js/app/app.coffee.ssp"
      views-entity-template = "node/views/entity-template.jade.ssp"
    }

    # Deploy Cartridge
    deploy {
      readme = "deploy/README.md.ssp"
      vagrant-file = "deploy/vagrant/Vagrantfile.ssp"
      ansible-prod = "deploy/ansible/prod.ssp"
      ansible-dev = "deploy/ansible/dev.ssp"
      ansible-topology-vars = "deploy/ansible/roles/topology/vars/main.yml.ssp"
    }

    # Util Cartridge
    util {
      readme = "util/README.md.ssp"
      gitignore = "util/gitignore.ssp"
      haproxy = "util/haproxy-local.cfg.ssp"
      copy-to-deploy = "util/copy-to-deploy.sh.ssp"
    }

    # Script Cartridge
    script {
      triggers = "script/postgresql/triggers.sql.ssp"
    }
  }

}

