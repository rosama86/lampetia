#import(lampetia.cg.cartridge.sbt.SbtProject)
#import(lampetia.extensions.Strings)
#import(com.typesafe.config.Config)
#import(Strings._)
<%@ val project: SbtProject %>
<%@ val config: Config%>

package nxt

import sbt.Keys._
import sbt._
import com.typesafe.sbt.SbtGit._
import scala.Console._

object Build extends sbt.Build {
        val buildPrompt: State => String = { state =>
        val prompt = GitCommand.prompt(state).trim
        val regex = """(.*)\((.*)\)>""".r
        prompt match {
        case regex(pname, "master") =>
                s"""$BLUE$pname $GREEN[master]$RESET $$ """
        case regex(pname, bname) =>
                s"""$BLUE$pname $YELLOW[$bname]$RESET $$ """
        case pname =>
                s"""$BLUE$pname$RESET $$ """
}

}

val dependencies = Common.Dependencies

override lazy val settings = super.settings ++
        Seq(
                organization := Common.organization,
                version := Common.version,
                scalaVersion := Common.Versions.scalaVersion,
                scalacOptions ++= Common.Settings.scalacOptions,
                scalacOptions in Test ++= Seq("-Yrangepos"),
                resolvers ++= Common.Resolvers.all,
                shellPrompt := buildPrompt,
                fork in Test := true)

#for (p <- project.subProjects)
  lazy val `${p.name.lispCase}`=
  Project("${p.name.lispCase}", file("${p.name.lispCase}"))
  #if (p.dependencies.nonEmpty)
    .dependsOn(${p.dependencies.map(_.name.lispCase.backqoute).mkString(",")})
  #end
  #if (p.plugins.nonEmpty)
    .enablePlugins(${p.plugins.mkString(",")})
  #end
#end

lazy val `${project.name.lispCase}` =
Project("${project.name.lispCase}", file("."))
#if (project.subProjects.nonEmpty)
  .aggregate(
  ${project.subProjects.map(_.name.lispCase.backqoute).mkString(",")}
  )
#end

}