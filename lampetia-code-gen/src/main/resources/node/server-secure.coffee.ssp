#import(lampetia.metamodel.Module)
#import(lampetia.metamodel._)
#import(lampetia.extensions.Strings)
#import(lampetia.cg.extensions.Models)
#import(com.typesafe.config.Config)
#import(Strings._)
#import(Models._)
<%@ val metamodels: Seq[Model] %>
<%@ val module: Module%>
<%@ val config: Config%>
#{
  val servicePort = config.getString("cg.generator.node.service.port")
  val facebookClientId = config.getString("cg.generator.node.facebook.client-id")
  val facebookClientSecret = config.getString("cg.generator.node.facebook.client-secret")
}#
express = require('express')
bodyParser = require('body-parser')
cookieParser = require('cookie-parser')
session = require('express-session')
app = express()
unirest = require('unirest')

passport = require('passport')
LocalStrategy = require('passport-local').Strategy
FacebookStrategy = require('passport-facebook').Strategy

app.set 'view engine', 'jade'
#app.use(bodyParser.json())
app.use(bodyParser.urlencoded({ extended: true }))
app.use cookieParser()
app.use session({secret: 'something not known ^&%--!@'})
app.use passport.initialize()
app.use passport.session()

app.use express.static(__dirname + '/public')

# HAPROXY_PORT_80_TCP_ADDR
# HAPROXY_PORT_80_TCP_PORT
securityPort = process.env.HAPROXY_PORT_80_TCP_PORT || 80
securityIp = process.env.HAPROXY_PORT_80_TCP_ADDR || 'localhost'
base = "http://#{securityIp}:#{securityPort}/api/s"
facebookCallbackUrl = process.env.FACEBOOK_CALLBACK_URL || 'http://localhost/auth/facebook/callback'

#console.log("security service: #{base}")
#console.log("facebook callback url: #{facebookCallbackUrl}")

facebookAuth = (profile, done) ->
  unirest
  .post "#{base}/facebook-auth"
  .type 'json'
  .send profile
  .end (res) ->
    done res

emailPasswordAuth = (email, password, done) ->
  unirest
  .post "#{base}/auth"
  .type 'json'
  .send { email: email, password: password }
  .end (res) ->
    #console.log("emailPasswordAuth: #{res.body}")
    done res


validate = (token, done) ->
  unirest
  .get "#{base}/validate"
  .header 'Authorization', "Bearer #{token}"
  .end (res) ->
    done res

passport.use new LocalStrategy { usernameField: 'email', passwordField: 'password' }, (email, password, done) ->
    #console.log("local strategy used")
    emailPasswordAuth email, password, (jres) ->
      #console.log("local: #{JSON.stringify jres}")
      if (jres.status == 200)
        done(null, jres.body)
      else
        done(null, false)

passport.use new FacebookStrategy { clientID: '${facebookClientId}', clientSecret: '${facebookClientSecret}', callbackURL: facebookCallbackUrl }, (token, refreshToken, profile, done) ->
  facebookAuth profile, (res) ->
    jwtToken = res.body
    #console.log("jwtToken from lampetia-security: #{jwtToken}")
    done(null, jwtToken)


passport.serializeUser (jwtToken, done) ->
  #console.log("serialize: #{JSON.stringify jwtToken}")
  done(null, jwtToken)


passport.deserializeUser (jwtToken, done) ->
  #console.log("deserialize: #{JSON.stringify jwtToken}")
  done(null, jwtToken)


app.get '/auth/facebook', passport.authenticate('facebook',{ scope : 'email'})

# handle the callback after facebook has authenticated the user
app.get '/auth/facebook/callback', passport.authenticate 'facebook', { successRedirect : '/', failureRedirect : '/login' }

app.get '/login', (req, res) ->
  res.render('login')


app.post '/login',
  passport.authenticate 'local', { successRedirect: '/', failureRedirect: '/login' }

app.get '/logout', (req, res) ->
  req.logout()
  res.redirect('/')


app.get '/', (req, res) ->
  if (req.user)
    token = req.user.token
    validate token, (jres) ->
      if (jres.status != 200)
        res.redirect('/login')
      else
        res.render('index', {token: token, response: jres.body} )
  else
    res.redirect('/login')


app.get '/template/:name', (req, res) ->
  #console.log(req.headers)
  res.render("template/#{req.params.name}")


app.listen(${servicePort})

